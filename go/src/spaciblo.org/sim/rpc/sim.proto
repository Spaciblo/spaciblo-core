syntax = "proto3";

package simRPC;

service SimHost {
  // Test whether a sim host is responsive
  rpc HandlePing (Ping) returns (Ack) {}

  // Get info about the simulations from the sim host
  rpc ListSimInfos (ListSimInfosParams) returns (SimInfoList) {}

  // Tell a sim when a client enters and leaves a space
  rpc HandleClientMembership(ClientMembership) returns (Ack) {}		

  // Tell a sim when a user initiates avatar motion
  rpc HandleAvatarMotion (AvatarMotion) returns (Ack) {}

  // Tell a sim when a client requests a setting update
  rpc HandleUpdateRequest (UpdateRequest) returns (Ack) {}

  // Tell a sim when a client requests a new node
  rpc HandleAddNodeRequest (AddNodeRequest) returns (Ack) {}

  // Tell a sim when a client requests node be removed
  rpc HandleRemoveNodeRequest (RemoveNodeRequest) returns (Ack) {}

  // Request that a space's simulator be started, if it hasn't already
  rpc HandleStartSimulatorRequest (StartSimulatorRequest) returns (Ack) {}
}

message Ping {
  string name = 1;
}

message Ack {
  string message = 1;
}

message ListSimInfosParams {}

message SimInfo {
	string name = 1;
	string uuid = 2;
}

message SimInfoList {
	repeated SimInfo infos = 1;
}

message ClientMembership {
	string clientUUID = 1;
	string userUUID = 2;
	string spaceUUID = 3;
	bool member = 4;
	bool avatar = 5;
}

message BodyUpdate {
	string name = 1;
	repeated double position = 2;
	repeated double orientation = 3;
	repeated double translation = 4;
	repeated double rotation = 5;
}

message AvatarMotion {
	string spaceUUID = 1;
	string clientUUID = 2;
	repeated double position = 3;
	repeated double orientation = 4;
	repeated double translation = 5;
	repeated double rotation = 6;
	repeated double scale = 7;
	repeated BodyUpdate bodyUpdates = 8;
}

message Setting {
	string name = 1;
	string value = 2;
}

message NodeUpdate {
	int64 Id = 1;
	repeated Setting settings = 2;
	repeated double position = 3;
	repeated double orientation = 4;
	repeated double translation = 5;
	repeated double rotation = 6;
	repeated double scale = 7;
	string templateUUID = 8;
	int64 leader = 9;
}

message UpdateRequest {
	string spaceUUID = 1;
	string clientUUID = 2;
	repeated NodeUpdate nodeUpdates = 3;
}

message AddNodeRequest {
	string spaceUUID = 1;
	string clientUUID = 2;
	string templateUUID = 3;
	int64 parent = 4;
	repeated double position = 5;
	repeated double orientation = 6;
	repeated double translation = 7;
	repeated double rotation = 8;
	repeated double scale = 9;
	int64 leader = 10;
}

message RemoveNodeRequest {
	string spaceUUID = 1;
	string clientUUID = 2;
	int64 id = 3;
}

message StartSimulatorRequest {
	string spaceUUID = 1;
}
