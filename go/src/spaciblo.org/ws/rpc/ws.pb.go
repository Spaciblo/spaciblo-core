// Code generated by protoc-gen-go.
// source: ws.proto
// DO NOT EDIT!

/*
Package wsRPC is a generated protocol buffer package.

It is generated from these files:
	ws.proto

It has these top-level messages:
	Ping
	Ack
	SpaceInitialization
	SimUpdate
	NodeUpdate
	Addition
*/
package wsRPC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ping struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ping) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Ack struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ack) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SpaceInitialization struct {
	SpaceUUID   string   `protobuf:"bytes,1,opt,name=spaceUUID" json:"spaceUUID,omitempty"`
	ClientUUIDs []string `protobuf:"bytes,2,rep,name=clientUUIDs" json:"clientUUIDs,omitempty"`
	State       string   `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *SpaceInitialization) Reset()                    { *m = SpaceInitialization{} }
func (m *SpaceInitialization) String() string            { return proto.CompactTextString(m) }
func (*SpaceInitialization) ProtoMessage()               {}
func (*SpaceInitialization) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SpaceInitialization) GetSpaceUUID() string {
	if m != nil {
		return m.SpaceUUID
	}
	return ""
}

func (m *SpaceInitialization) GetClientUUIDs() []string {
	if m != nil {
		return m.ClientUUIDs
	}
	return nil
}

func (m *SpaceInitialization) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type SimUpdate struct {
	SpaceUUID   string        `protobuf:"bytes,1,opt,name=spaceUUID" json:"spaceUUID,omitempty"`
	ClientUUIDs []string      `protobuf:"bytes,2,rep,name=clientUUIDs" json:"clientUUIDs,omitempty"`
	NodeUpdates []*NodeUpdate `protobuf:"bytes,3,rep,name=nodeUpdates" json:"nodeUpdates,omitempty"`
	Additions   []*Addition   `protobuf:"bytes,4,rep,name=additions" json:"additions,omitempty"`
	Deletions   []int64       `protobuf:"varint,5,rep,packed,name=deletions" json:"deletions,omitempty"`
}

func (m *SimUpdate) Reset()                    { *m = SimUpdate{} }
func (m *SimUpdate) String() string            { return proto.CompactTextString(m) }
func (*SimUpdate) ProtoMessage()               {}
func (*SimUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SimUpdate) GetSpaceUUID() string {
	if m != nil {
		return m.SpaceUUID
	}
	return ""
}

func (m *SimUpdate) GetClientUUIDs() []string {
	if m != nil {
		return m.ClientUUIDs
	}
	return nil
}

func (m *SimUpdate) GetNodeUpdates() []*NodeUpdate {
	if m != nil {
		return m.NodeUpdates
	}
	return nil
}

func (m *SimUpdate) GetAdditions() []*Addition {
	if m != nil {
		return m.Additions
	}
	return nil
}

func (m *SimUpdate) GetDeletions() []int64 {
	if m != nil {
		return m.Deletions
	}
	return nil
}

type NodeUpdate struct {
	Id          int64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Position    []float64 `protobuf:"fixed64,2,rep,packed,name=position" json:"position,omitempty"`
	Orientation []float64 `protobuf:"fixed64,3,rep,packed,name=orientation" json:"orientation,omitempty"`
	Translation []float64 `protobuf:"fixed64,4,rep,packed,name=translation" json:"translation,omitempty"`
	Rotation    []float64 `protobuf:"fixed64,5,rep,packed,name=rotation" json:"rotation,omitempty"`
}

func (m *NodeUpdate) Reset()                    { *m = NodeUpdate{} }
func (m *NodeUpdate) String() string            { return proto.CompactTextString(m) }
func (*NodeUpdate) ProtoMessage()               {}
func (*NodeUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NodeUpdate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NodeUpdate) GetPosition() []float64 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *NodeUpdate) GetOrientation() []float64 {
	if m != nil {
		return m.Orientation
	}
	return nil
}

func (m *NodeUpdate) GetTranslation() []float64 {
	if m != nil {
		return m.Translation
	}
	return nil
}

func (m *NodeUpdate) GetRotation() []float64 {
	if m != nil {
		return m.Rotation
	}
	return nil
}

type Addition struct {
	Id           int64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Position     []float64 `protobuf:"fixed64,2,rep,packed,name=position" json:"position,omitempty"`
	Orientation  []float64 `protobuf:"fixed64,3,rep,packed,name=orientation" json:"orientation,omitempty"`
	Translation  []float64 `protobuf:"fixed64,4,rep,packed,name=translation" json:"translation,omitempty"`
	Rotation     []float64 `protobuf:"fixed64,5,rep,packed,name=rotation" json:"rotation,omitempty"`
	Parent       int64     `protobuf:"varint,6,opt,name=parent" json:"parent,omitempty"`
	TemplateUUID string    `protobuf:"bytes,7,opt,name=templateUUID" json:"templateUUID,omitempty"`
}

func (m *Addition) Reset()                    { *m = Addition{} }
func (m *Addition) String() string            { return proto.CompactTextString(m) }
func (*Addition) ProtoMessage()               {}
func (*Addition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Addition) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Addition) GetPosition() []float64 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Addition) GetOrientation() []float64 {
	if m != nil {
		return m.Orientation
	}
	return nil
}

func (m *Addition) GetTranslation() []float64 {
	if m != nil {
		return m.Translation
	}
	return nil
}

func (m *Addition) GetRotation() []float64 {
	if m != nil {
		return m.Rotation
	}
	return nil
}

func (m *Addition) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *Addition) GetTemplateUUID() string {
	if m != nil {
		return m.TemplateUUID
	}
	return ""
}

func init() {
	proto.RegisterType((*Ping)(nil), "wsRPC.Ping")
	proto.RegisterType((*Ack)(nil), "wsRPC.Ack")
	proto.RegisterType((*SpaceInitialization)(nil), "wsRPC.SpaceInitialization")
	proto.RegisterType((*SimUpdate)(nil), "wsRPC.SimUpdate")
	proto.RegisterType((*NodeUpdate)(nil), "wsRPC.NodeUpdate")
	proto.RegisterType((*Addition)(nil), "wsRPC.Addition")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WSHost service

type WSHostClient interface {
	// Test whether a sim host is responsive
	HandlePing(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error)
	// Send sim updates to WS clients
	SendSimUpdate(ctx context.Context, in *SimUpdate, opts ...grpc.CallOption) (*Ack, error)
	// Send initial state to WS clients
	SendSpaceInitialization(ctx context.Context, in *SpaceInitialization, opts ...grpc.CallOption) (*Ack, error)
}

type wSHostClient struct {
	cc *grpc.ClientConn
}

func NewWSHostClient(cc *grpc.ClientConn) WSHostClient {
	return &wSHostClient{cc}
}

func (c *wSHostClient) HandlePing(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/wsRPC.WSHost/HandlePing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wSHostClient) SendSimUpdate(ctx context.Context, in *SimUpdate, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/wsRPC.WSHost/SendSimUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wSHostClient) SendSpaceInitialization(ctx context.Context, in *SpaceInitialization, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := grpc.Invoke(ctx, "/wsRPC.WSHost/SendSpaceInitialization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WSHost service

type WSHostServer interface {
	// Test whether a sim host is responsive
	HandlePing(context.Context, *Ping) (*Ack, error)
	// Send sim updates to WS clients
	SendSimUpdate(context.Context, *SimUpdate) (*Ack, error)
	// Send initial state to WS clients
	SendSpaceInitialization(context.Context, *SpaceInitialization) (*Ack, error)
}

func RegisterWSHostServer(s *grpc.Server, srv WSHostServer) {
	s.RegisterService(&_WSHost_serviceDesc, srv)
}

func _WSHost_HandlePing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSHostServer).HandlePing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wsRPC.WSHost/HandlePing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSHostServer).HandlePing(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _WSHost_SendSimUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSHostServer).SendSimUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wsRPC.WSHost/SendSimUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSHostServer).SendSimUpdate(ctx, req.(*SimUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _WSHost_SendSpaceInitialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceInitialization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSHostServer).SendSpaceInitialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wsRPC.WSHost/SendSpaceInitialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSHostServer).SendSpaceInitialization(ctx, req.(*SpaceInitialization))
	}
	return interceptor(ctx, in, info, handler)
}

var _WSHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wsRPC.WSHost",
	HandlerType: (*WSHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandlePing",
			Handler:    _WSHost_HandlePing_Handler,
		},
		{
			MethodName: "SendSimUpdate",
			Handler:    _WSHost_SendSimUpdate_Handler,
		},
		{
			MethodName: "SendSpaceInitialization",
			Handler:    _WSHost_SendSpaceInitialization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ws.proto",
}

func init() { proto.RegisterFile("ws.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x53, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0xc5, 0xe3, 0x24, 0x9d, 0xdc, 0xf0, 0x34, 0x08, 0xa2, 0x08, 0x89, 0xc8, 0x1b, 0xb2, 0x61,
	0x90, 0xda, 0x2f, 0xa8, 0xca, 0xa2, 0xdd, 0xa0, 0xca, 0xd1, 0x88, 0xb5, 0x89, 0xad, 0xca, 0x9a,
	0xc4, 0x8e, 0x62, 0x4b, 0x95, 0xf8, 0x12, 0xfe, 0x80, 0xaf, 0x61, 0xc3, 0x17, 0x21, 0x3b, 0xc9,
	0x24, 0x03, 0xec, 0xd8, 0x74, 0x97, 0x73, 0xee, 0x39, 0x27, 0xf7, 0xda, 0xd7, 0xb0, 0xbd, 0xb7,
	0xbb, 0x7e, 0x30, 0xce, 0x90, 0xf8, 0xde, 0xb2, 0xdb, 0x2b, 0x5a, 0x40, 0x74, 0xab, 0xf4, 0x1d,
	0x21, 0x10, 0x69, 0xde, 0xc9, 0x1c, 0x95, 0xa8, 0x4a, 0x59, 0xf8, 0xa6, 0xef, 0x00, 0x5f, 0x36,
	0x07, 0x92, 0xc3, 0x59, 0x27, 0xad, 0xe5, 0x77, 0x73, 0x75, 0x86, 0xf4, 0x00, 0x2f, 0xeb, 0x9e,
	0x37, 0xf2, 0x46, 0x2b, 0xa7, 0x78, 0xab, 0xbe, 0x71, 0xa7, 0x8c, 0x26, 0x6f, 0x21, 0xb5, 0x9e,
	0xde, 0xef, 0x6f, 0x3e, 0x4d, 0x96, 0x85, 0x20, 0x25, 0x64, 0x4d, 0xab, 0xa4, 0x76, 0x1e, 0xd9,
	0x7c, 0x53, 0xe2, 0x2a, 0x65, 0x6b, 0x8a, 0xbc, 0x82, 0xd8, 0x3a, 0xee, 0x64, 0x8e, 0x83, 0x77,
	0x04, 0xf4, 0x27, 0x82, 0xb4, 0x56, 0xdd, 0xbe, 0x17, 0xdc, 0xc9, 0xff, 0xfe, 0xc7, 0x05, 0x64,
	0xda, 0x08, 0x39, 0xa6, 0xd9, 0x1c, 0x97, 0xb8, 0xca, 0xce, 0x5f, 0xec, 0xc2, 0xa1, 0xec, 0x3e,
	0x1f, 0x2b, 0x6c, 0xad, 0x22, 0x1f, 0x20, 0xe5, 0x42, 0x28, 0x3f, 0xa4, 0xcd, 0xa3, 0x60, 0x79,
	0x36, 0x59, 0x2e, 0x27, 0x9e, 0x2d, 0x0a, 0xdf, 0xa3, 0x90, 0xad, 0x1c, 0xe5, 0x71, 0x89, 0x2b,
	0xcc, 0x16, 0x82, 0x7e, 0x47, 0x00, 0xcb, 0x8f, 0xc8, 0x53, 0xd8, 0x28, 0x11, 0x26, 0xc1, 0x6c,
	0xa3, 0x04, 0x29, 0x60, 0xdb, 0x1b, 0x1b, 0x92, 0x42, 0xff, 0x88, 0x1d, 0xb1, 0x1f, 0xcf, 0x0c,
	0x7e, 0x96, 0x70, 0xde, 0xa1, 0x79, 0xc4, 0xd6, 0x94, 0x57, 0xb8, 0x81, 0x6b, 0xdb, 0x8e, 0x8a,
	0x68, 0x54, 0xac, 0x28, 0x9f, 0x3f, 0x98, 0x29, 0x20, 0x1e, 0xf3, 0x67, 0x4c, 0x7f, 0x21, 0xd8,
	0xce, 0x03, 0x3d, 0xa4, 0xc6, 0xc8, 0x6b, 0x48, 0x7a, 0x3e, 0x48, 0xed, 0xf2, 0x24, 0xf4, 0x33,
	0x21, 0x42, 0xe1, 0xb1, 0x93, 0x5d, 0xdf, 0x72, 0x37, 0x2e, 0xc4, 0x59, 0x58, 0x88, 0x13, 0xee,
	0xfc, 0x07, 0x82, 0xe4, 0x4b, 0x7d, 0x6d, 0xac, 0x23, 0xef, 0x01, 0xae, 0xb9, 0x16, 0xad, 0x0c,
	0xab, 0x9f, 0x4d, 0x57, 0xe8, 0x41, 0x01, 0xf3, 0x7d, 0x36, 0x07, 0xfa, 0x88, 0x7c, 0x84, 0x27,
	0xb5, 0xd4, 0x62, 0x59, 0xbb, 0xe7, 0x53, 0xf9, 0xc8, 0xfc, 0x61, 0xb8, 0x82, 0x37, 0xc1, 0xf0,
	0x8f, 0x57, 0x51, 0xcc, 0xd6, 0xbf, 0x6b, 0xa7, 0x21, 0x5f, 0x93, 0xf0, 0x42, 0x2f, 0x7e, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x17, 0xba, 0xde, 0x55, 0xad, 0x03, 0x00, 0x00,
}
